
   =================================================================
   =  primesieve - optimized sieve of Eratosthenes implementation  =
   =                                                               =
   =               http://primesieve.googlecode.com                =
   =================================================================

Contents
========

  1. About primesieve
  2. Algorithm complexity
  3. Requirements
  4. What's in this source archive
  5. Sieve of Eratosthenes implementation
  6. Motivation
  7. Further reading
  8. Reporting bugs
  9. References

1. About primesieve
===================

  primesieve is a free software program and C++ library that generates
  prime numbers and prime k-tuplets (twins, triplets, ...) < 2^64
  using a highly optimized implementation of the sieve of
  Eratosthenes.

  Homepage: http://primesieve.googlecode.com

2. Algorithm complexity
=======================

  primesieve uses the segmented sieve of Eratosthenes with wheel
  factorization, this algorithm has a complexity of O(n log log n)
  operations and uses O(n^0.5) space.

  primesieve's memory requirement per thread is about:
  pi(n^0.5) * 8 bytes + 400 kilobytes

3. Requirements
===============

  primesieve is written in C++03, it compiles with every standard
  compliant C++ compiler and runs on both little-endian (x86, x86-64)
  and big-endian (PowerPC, SPARC, ...) CPUs. The parallelization
  (optional) is implemented using OpenMP 2.0 or later.

  primesieve has been optimized for CPUs with 15 or more integer
  registers, so if you have a x86-64 CPU make sure to use a 64-bit
  version of primesieve (i386 has only 8 registers).

  For compilation instructions please refer to INSTALL.

4. What's in this source archive
================================

  ./doc - Documentation directory
  -------------------------------
  LIBPRIMESIEVE   Explains how to build primesieve as a C++ library
                  for use in your own program.
  EXAMPLES        Contains source code examples that explain how to
                  generate primes using libprimesieve.
  API             List of all public member functions of the
                  PrimeSieve and ParallelPrimeSieve C++ classes.
  FAQ             Frequently asked questions.

  ./src - Source code directory
  -----------------------------
  src/soe         Contains the sieve of Eratosthenes implementation.
  src/apps        Contains the primesieve console and gui
                  applications.
  src/test        Contains unit tests for the sieve of Eratosthenes
                  implementation (run `make test').

5. Sieve of Eratosthenes implementation
=======================================

  General information
  -------------------
  The src/soe directory contains the sieve of Eratosthenes source
  code. Files that start with a capital letter contain a class of the
  same name, files in lower case contain inline functions and
  constant definitions. If you are new to prime number sieving I
  recommend reading some of the papers from section 7.

  The doc/EXAMPLES file contains C++ source code examples that explain
  how to use PrimeSieve objects. The doc/API file contains the
  complete API of the PrimeSieve and ParallelPrimeSieve C++ classes.

  Quick start
  -----------
  The segmented sieve of Eratosthenes is in SieveOfEratosthenes.cpp.
  Multiples are crossed off in EratSmall.cpp, EratMedium.cpp and
  EratBig.cpp. Prime numbers are called back and printed in
  PrimeFinder.cpp using a macro from SieveOfEratosthenes-GENERATE.h.

  C++ classes
  -----------
  * ParallelPrimeSieve (derived from PrimeSieve)
    ParallelPrimeSieve provides an easy API for multi-threaded prime
    sieving using OpenMP, it scales well even with 100 CPU cores! In
    ParallelPrimeSieve each OpenMP thread sieves primes using a thread
    private PrimeSieve object. The doc/EXAMPLES file explains
    ParallelPrimeSieve in more detail.

  * PrimeSieve
    PrimeSieve objects provide an easy API for prime sieving,
    PrimeSieve::sieve(start, stop) sieves the primes within the
    interval [start, stop]. The classes below are all used directly or
    indirectly for sieving.

  * SieveOfEratosthenes (abstract class)
    Implementation of the segmented sieve of Eratosthenes using a bit
    array with 30 numbers per byte, each byte of the sieve array holds
    the 8 offsets k = { 7, 11, 13, 17, 19, 23, 29, 31 }.
    Its main methods are addSievingPrime(uint_t) which must be called
    consecutively for all primes <= sqrt(n) in order to sieve the
    primes up to n and sieve(). SieveOfEratosthenes uses the
    EratSmall, EratMedium and EratBig classes to cross-off multiples.

  * PrimeFinder (derived from SieveOfEratosthenes)
    Main SieveOfEratosthenes class: PrimeFinder is used to callback,
    print and count the primes and prime k-tuplets within the interval
    [start_, stop_] of the associated PrimeSieve object.

  * PrimeGenerator (derived from SieveOfEratosthenes)
    Generates the primes up to sqrt(n) needed for sieving by the
    PrimeFinder class.

  * PreSieve
    PreSieve objects are used to pre-sieve multiples of small primes
    e.g. <= 19 to speed up the sieve of Eratosthenes.

  * WheelFactorization (abstract class)
    Wheel factorization is used to skip multiples of small primes e.g.
    <= 7 to speed up the sieve of Eratosthenes. The abstract
    WheelFactorization class is used to initialize sieving primes i.e.
    addSievingPrime() calculates the first multiple >= start of each
    sieving prime and the position within the SieveOfEratosthenes
    array of that multiple (multipleIndex). The unsetBit() method is
    used to cross-off a multiple (unset a bit) and to calculate the
    sieving prime's next multiple.

  * EratSmall (derived from WheelFactorization)
    Segmented sieve of Eratosthenes algorithm with a hard-coded
    modulo 30 wheel that skips multiples of 2, 3 and 5. This algorithm
    is optimized for small sieving primes that have many multiples in
    each segment. EratSmall is a further optimized implementation of
    Achim Flammenkamp's algorithm.[9]

  * EratMedium (derived from WheelFactorization)
    Segmented sieve of Eratosthenes algorithm with a fixed modulo 210
    wheel that skips multiples of 2, 3, 5 and 7. The wheel is
    implemented using a precomputed lookup table (wheel210 array from
    WheelFactorization.cpp). This algorithm is optimized for medium
    sieving primes with a few multiples per segment.

  * EratBig (derived from WheelFactorization)
    Segmented sieve of Eratosthenes algorithm with Tomás Oliveira's
    improvement for big sieving primes [11] and a fixed modulo 210
    wheel that skips multiples of 2, 3, 5 and 7. The wheel is
    implemented using a precomputed lookup table (wheel210 array from
    WheelFactorization.cpp). EratBig is optimized for big sieving
    primes that have less than one multiple per segment.

  Miscellaneous
  -------------
  * config.h
    Contains compile time constants that set the size of various
    arrays and limits within primesieve. You can set these constants
    according to your CPU type to get the best performance.

6. Motivation
=============

  I (the author, <kim.walisch@gmail.com>) got my first PC in 1997, it
  had an Intel 200 mmx CPU and 32 megabytes of memory. I was 14 years
  old then and bought the book "C++ for Kids" because I wanted to
  program a computer game :-) Besides a simple graphic game the book
  also contained a trial division prime checker which I found amazing,
  one entered a positive integer and the PC started calculating, after
  about a minute the program printed "is prime" or "is not prime". I
  soon started to invent new faster algorithms ...

7. Further reading
==================

  Jonathan Sorenson's papers provide a good introduction to prime
  number sieves, the sieve of Eratosthenes and segmentation are
  explained in [5], wheel factorization is covered in [6].
  Tomás Oliveira e Silva on his website [11] explains his improvement
  to the segmented sieve of Eratosthenes for big sieving primes.
  A. Járai and E. Vatai's paper "Cache optimized linear sieve" [12]
  explains many of the optimizations used in primesieve.
  Joerg Richstein in [10] (German language) describes how to pre-sieve
  multiples of small primes to speed up the sieve of Eratosthenes.

8. Reporting bugs
=================

  To report a bug or give feedback please send an email to the author
  Kim Walisch <kim.walisch@gmail.com>.

9. References
=============

  [1] Richard C. Singleton, "An efficient prime number generator",
      Communications of the ACM 12, 563-564, 1969.
  [2] R. P. Brent, "The first occurrence of large gaps between
      successive primes", Mathematics of Computation, 27:959-963,
      1973.
  [3] C. Bays and R. Hudson, "The segmented sieve of Eratosthenes and
      primes in arithmetic progressions to 10^12", BIT 17:121 127,
      1977.
  [4] Paul Pritchard, "Fast compact prime number sieves (among
      others)", Journal of Algorithms 4 (1983), 332-344.
  [5] J. Sorenson, "An Introduction To Prime Number Sieves", Computer
      Science Technical Report Vol. 909, January 1990.
      http://research.cs.wisc.edu/techreports/1990/TR909.pdf
  [6] J. Sorenson, "An analysis of two prime number sieves", Computer
      Science Technical Report Vol. 1028, June 1991.
      http://research.cs.wisc.edu/techreports/1991/TR1028.pdf
  [7] J. Sorenson and I. Parberry, "Two Fast Parallel Prime Number
      Sieves", Information and Computation, Vol. 114, No. 1, 1994.
      http://larc.unt.edu/ian/pubs/sieve.pdf
  [8] J. Sorenson, "Trading Time for Space in Prime Number Sieves",
      Lecture Notes in Computer Science, Vol. 1423 (1998), 179-194.
  [9] Achim Flammenkamp, "The Art of Prime Sieving", 1998.
      http://wwwhomes.uni-bielefeld.de/achim/prime_sieve.html
 [10] Jörg Richstein, "Segmentierung und Optimierung von Algorithmen
      zu Problemen aus der Zahlentheorie", Gießen, Univ., Diss., 1999.
 [11] Tomás Oliveira e Silva, "Fast implementation of the segmented
      sieve of Eratosthenes", 2002.
      http://www.ieeta.pt/~tos/software/prime_sieve.html
 [12] A. Járai and E. Vatai, "Cache optimized linear sieve", Acta
      Univ. Sapientiae, Informatica, 3, 2 (2011) 205-223.
      http://www.acta.sapientia.ro/acta-info/C3-2/info32-5.pdf
